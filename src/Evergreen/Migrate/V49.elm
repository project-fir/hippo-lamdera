module Evergreen.Migrate.V49 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V48.Api.Card
import Evergreen.V48.Auth.Common
import Evergreen.V48.OAuth
import Evergreen.V48.OAuth.AuthorizationCode
import Evergreen.V48.Types
import Evergreen.V49.Api.Card
import Evergreen.V49.Auth.Common
import Evergreen.V49.OAuth
import Evergreen.V49.OAuth.AuthorizationCode
import Evergreen.V49.Types
import Lamdera.Migrations exposing (..)
import Random


frontendModel : Evergreen.V48.Types.FrontendModel -> ModelMigration Evergreen.V49.Types.FrontendModel Evergreen.V49.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V48.Types.BackendModel -> ModelMigration Evergreen.V49.Types.BackendModel Evergreen.V49.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V48.Types.FrontendMsg -> MsgMigration Evergreen.V49.Types.FrontendMsg Evergreen.V49.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V48.Types.ToBackend -> MsgMigration Evergreen.V49.Types.ToBackend Evergreen.V49.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V48.Types.BackendMsg -> MsgMigration Evergreen.V49.Types.BackendMsg Evergreen.V49.Types.BackendMsg
backendMsg old =
    MsgMigrated ( migrate_Types_BackendMsg old, Cmd.none )


toFrontend : Evergreen.V48.Types.ToFrontend -> MsgMigration Evergreen.V49.Types.ToFrontend Evergreen.V49.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_BackendModel : Evergreen.V48.Types.BackendModel -> Evergreen.V49.Types.BackendModel
migrate_Types_BackendModel old =
    { sessions = old.sessions
    , users = old.users
    , cards = old.cards |> Dict.map (\k -> migrate_Api_Card_CardEnvelope)
    , now = old.now
    , seed = Random.initialSeed 0
    , nextCardId = old.nextCardId
    , pendingAuths = old.pendingAuths
    }


migrate_Api_Card_CardEnvelope : Evergreen.V48.Api.Card.CardEnvelope -> Evergreen.V49.Api.Card.CardEnvelope
migrate_Api_Card_CardEnvelope old =
    { id = old.id
    , card = old.card |> migrate_Api_Card_FlashCard
    , userId = old.userId
    , createdAt = old.createdAt
    , lastModifiedOn = old.lastModifiedOn
    , nextPromptSchedFor = old.nextPromptSchedFor
    , frequency = old.frequency |> migrate_Api_Card_PromptFrequency
    }


migrate_Api_Card_FlashCard : Evergreen.V48.Api.Card.FlashCard -> Evergreen.V49.Api.Card.FlashCard
migrate_Api_Card_FlashCard old =
    case old of
        Evergreen.V48.Api.Card.PlainText p0 ->
            Evergreen.V49.Api.Card.PlainText (p0 |> migrate_Api_Card_PlainTextCard)

        Evergreen.V48.Api.Card.Markdown p0 ->
            Evergreen.V49.Api.Card.Markdown (p0 |> migrate_Api_Card_MarkdownCard)


migrate_Api_Card_MarkdownCard : Evergreen.V48.Api.Card.MarkdownCard -> Evergreen.V49.Api.Card.MarkdownCard
migrate_Api_Card_MarkdownCard old =
    old


migrate_Api_Card_PlainTextCard : Evergreen.V48.Api.Card.PlainTextCard -> Evergreen.V49.Api.Card.PlainTextCard
migrate_Api_Card_PlainTextCard old =
    old


migrate_Api_Card_PromptFrequency : Evergreen.V48.Api.Card.PromptFrequency -> Evergreen.V49.Api.Card.PromptFrequency
migrate_Api_Card_PromptFrequency old =
    case old of
        Evergreen.V48.Api.Card.Immediately ->
            Evergreen.V49.Api.Card.Immediately

        Evergreen.V48.Api.Card.OneDay ->
            Evergreen.V49.Api.Card.OneDay

        Evergreen.V48.Api.Card.TwoDays ->
            Evergreen.V49.Api.Card.TwoDays

        Evergreen.V48.Api.Card.SevenDays ->
            Evergreen.V49.Api.Card.SevenDays

        Evergreen.V48.Api.Card.FourteenDays ->
            Evergreen.V49.Api.Card.FourteenDays

        Evergreen.V48.Api.Card.ThirtyDays ->
            Evergreen.V49.Api.Card.ThirtyDays


migrate_Auth_Common_AuthChallengeReason : Evergreen.V48.Auth.Common.AuthChallengeReason -> Evergreen.V49.Auth.Common.AuthChallengeReason
migrate_Auth_Common_AuthChallengeReason old =
    case old of
        Evergreen.V48.Auth.Common.AuthSessionMissing ->
            Evergreen.V49.Auth.Common.AuthSessionMissing

        Evergreen.V48.Auth.Common.AuthSessionInvalid ->
            Evergreen.V49.Auth.Common.AuthSessionInvalid

        Evergreen.V48.Auth.Common.AuthSessionExpired ->
            Evergreen.V49.Auth.Common.AuthSessionExpired

        Evergreen.V48.Auth.Common.AuthSessionLoggedOut ->
            Evergreen.V49.Auth.Common.AuthSessionLoggedOut


migrate_Auth_Common_BackendMsg : Evergreen.V48.Auth.Common.BackendMsg -> Evergreen.V49.Auth.Common.BackendMsg
migrate_Auth_Common_BackendMsg old =
    case old of
        Evergreen.V48.Auth.Common.AuthSigninInitiated_ p0 ->
            Evergreen.V49.Auth.Common.AuthSigninInitiated_ p0

        Evergreen.V48.Auth.Common.AuthSigninInitiatedDelayed_ p0 p1 ->
            Evergreen.V49.Auth.Common.AuthSigninInitiatedDelayed_ p0 (p1 |> migrate_Auth_Common_ToFrontend)

        Evergreen.V48.Auth.Common.AuthCallbackReceived_ p0 p1 p2 p3 p4 p5 p6 ->
            Evergreen.V49.Auth.Common.AuthCallbackReceived_ p0 p1 p2 p3 p4 p5 p6

        Evergreen.V48.Auth.Common.AuthSuccess p0 p1 p2 p3 p4 ->
            Evergreen.V49.Auth.Common.AuthSuccess p0
                p1
                p2
                p3
                (p4 |> Result.mapError migrate_Auth_Common_Error >> Result.map (Tuple.mapBoth migrate_Auth_Common_UserInfo (Maybe.map migrate_Auth_Common_Token)))

        Evergreen.V48.Auth.Common.AuthRenewSession p0 p1 ->
            Evergreen.V49.Auth.Common.AuthRenewSession p0 p1


migrate_Auth_Common_Error : Evergreen.V48.Auth.Common.Error -> Evergreen.V49.Auth.Common.Error
migrate_Auth_Common_Error old =
    case old of
        Evergreen.V48.Auth.Common.ErrStateMismatch ->
            Evergreen.V49.Auth.Common.ErrStateMismatch

        Evergreen.V48.Auth.Common.ErrAuthorization p0 ->
            Evergreen.V49.Auth.Common.ErrAuthorization (p0 |> migrate_OAuth_AuthorizationCode_AuthorizationError)

        Evergreen.V48.Auth.Common.ErrAuthentication p0 ->
            Evergreen.V49.Auth.Common.ErrAuthentication (p0 |> migrate_OAuth_AuthorizationCode_AuthenticationError)

        Evergreen.V48.Auth.Common.ErrHTTPGetAccessToken ->
            Evergreen.V49.Auth.Common.ErrHTTPGetAccessToken

        Evergreen.V48.Auth.Common.ErrHTTPGetUserInfo ->
            Evergreen.V49.Auth.Common.ErrHTTPGetUserInfo

        Evergreen.V48.Auth.Common.ErrAuthString p0 ->
            Evergreen.V49.Auth.Common.ErrAuthString p0


migrate_Auth_Common_ToFrontend : Evergreen.V48.Auth.Common.ToFrontend -> Evergreen.V49.Auth.Common.ToFrontend
migrate_Auth_Common_ToFrontend old =
    case old of
        Evergreen.V48.Auth.Common.AuthInitiateSignin p0 ->
            Evergreen.V49.Auth.Common.AuthInitiateSignin p0

        Evergreen.V48.Auth.Common.AuthError p0 ->
            Evergreen.V49.Auth.Common.AuthError (p0 |> migrate_Auth_Common_Error)

        Evergreen.V48.Auth.Common.AuthSessionChallenge p0 ->
            Evergreen.V49.Auth.Common.AuthSessionChallenge (p0 |> migrate_Auth_Common_AuthChallengeReason)


migrate_Auth_Common_Token : Evergreen.V48.Auth.Common.Token -> Evergreen.V49.Auth.Common.Token
migrate_Auth_Common_Token old =
    { methodId = old.methodId
    , token = old.token |> migrate_OAuth_Token
    , created = old.created
    , expires = old.expires
    }


migrate_Auth_Common_UserInfo : Evergreen.V48.Auth.Common.UserInfo -> Evergreen.V49.Auth.Common.UserInfo
migrate_Auth_Common_UserInfo old =
    old


migrate_OAuth_AuthorizationCode_AuthenticationError : Evergreen.V48.OAuth.AuthorizationCode.AuthenticationError -> Evergreen.V49.OAuth.AuthorizationCode.AuthenticationError
migrate_OAuth_AuthorizationCode_AuthenticationError old =
    { error = old.error |> migrate_OAuth_ErrorCode
    , errorDescription = old.errorDescription
    , errorUri = old.errorUri
    }


migrate_OAuth_AuthorizationCode_AuthorizationError : Evergreen.V48.OAuth.AuthorizationCode.AuthorizationError -> Evergreen.V49.OAuth.AuthorizationCode.AuthorizationError
migrate_OAuth_AuthorizationCode_AuthorizationError old =
    { error = old.error |> migrate_OAuth_ErrorCode
    , errorDescription = old.errorDescription
    , errorUri = old.errorUri
    , state = old.state
    }


migrate_OAuth_ErrorCode : Evergreen.V48.OAuth.ErrorCode -> Evergreen.V49.OAuth.ErrorCode
migrate_OAuth_ErrorCode old =
    case old of
        Evergreen.V48.OAuth.InvalidRequest ->
            Evergreen.V49.OAuth.InvalidRequest

        Evergreen.V48.OAuth.UnauthorizedClient ->
            Evergreen.V49.OAuth.UnauthorizedClient

        Evergreen.V48.OAuth.AccessDenied ->
            Evergreen.V49.OAuth.AccessDenied

        Evergreen.V48.OAuth.UnsupportedResponseType ->
            Evergreen.V49.OAuth.UnsupportedResponseType

        Evergreen.V48.OAuth.InvalidScope ->
            Evergreen.V49.OAuth.InvalidScope

        Evergreen.V48.OAuth.ServerError ->
            Evergreen.V49.OAuth.ServerError

        Evergreen.V48.OAuth.TemporarilyUnavailable ->
            Evergreen.V49.OAuth.TemporarilyUnavailable

        Evergreen.V48.OAuth.Custom p0 ->
            Evergreen.V49.OAuth.Custom p0


migrate_OAuth_Token : Evergreen.V48.OAuth.Token -> Evergreen.V49.OAuth.Token
migrate_OAuth_Token old =
    case old of
        Evergreen.V48.OAuth.Bearer p0 ->
            Evergreen.V49.OAuth.Bearer p0


migrate_Types_BackendMsg : Evergreen.V48.Types.BackendMsg -> Evergreen.V49.Types.BackendMsg
migrate_Types_BackendMsg old =
    case old of
        Evergreen.V48.Types.AuthBackendMsg p0 ->
            Evergreen.V49.Types.AuthBackendMsg (p0 |> migrate_Auth_Common_BackendMsg)

        Evergreen.V48.Types.CheckSession p0 p1 ->
            Evergreen.V49.Types.CheckSession p0 p1

        Evergreen.V48.Types.RenewSession p0 p1 p2 p3 ->
            Evergreen.V49.Types.RenewSession p0 p1 p2 p3

        Evergreen.V48.Types.Tick p0 ->
            Evergreen.V49.Types.Tick p0

        Evergreen.V48.Types.Roll _ _ ->
            Evergreen.V49.Types.Noop_BackendMsg

        Evergreen.V48.Types.Noop_BackendMsg ->
            Evergreen.V49.Types.Noop_BackendMsg
