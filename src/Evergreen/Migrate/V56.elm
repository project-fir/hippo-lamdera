module Evergreen.Migrate.V56 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V55.Api.Card
import Evergreen.V55.Types
import Evergreen.V56.Api.Card
import Evergreen.V56.Types
import Lamdera.Migrations exposing (..)


frontendModel : Evergreen.V55.Types.FrontendModel -> ModelMigration Evergreen.V56.Types.FrontendModel Evergreen.V56.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V55.Types.BackendModel -> ModelMigration Evergreen.V56.Types.BackendModel Evergreen.V56.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V55.Types.FrontendMsg -> MsgMigration Evergreen.V56.Types.FrontendMsg Evergreen.V56.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V55.Types.ToBackend -> MsgMigration Evergreen.V56.Types.ToBackend Evergreen.V56.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V55.Types.BackendMsg -> MsgMigration Evergreen.V56.Types.BackendMsg Evergreen.V56.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V55.Types.ToFrontend -> MsgMigration Evergreen.V56.Types.ToFrontend Evergreen.V56.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_BackendModel : Evergreen.V55.Types.BackendModel -> Evergreen.V56.Types.BackendModel
migrate_Types_BackendModel old =
    { sessions = old.sessions
    , users = old.users
    , cards = old.cards |> Dict.map (\k -> migrate_Api_Card_CardEnvelope)
    , now = old.now
    , seed = old.seed
    , nextCardId = old.nextCardId
    , pendingAuths = old.pendingAuths
    , newField = Nothing
    }


migrate_Api_Card_CardEnvelope : Evergreen.V55.Api.Card.CardEnvelope -> Evergreen.V56.Api.Card.CardEnvelope
migrate_Api_Card_CardEnvelope old =
    { id = old.id
    , card = old.card |> migrate_Api_Card_FlashCard
    , userId = old.userId
    , createdAt = old.createdAt
    , lastModifiedOn = old.lastModifiedOn
    , nextPromptSchedFor = old.nextPromptSchedFor
    , frequency = old.frequency |> migrate_Api_Card_PromptFrequency
    }


migrate_Api_Card_FlashCard : Evergreen.V55.Api.Card.FlashCard -> Evergreen.V56.Api.Card.FlashCard
migrate_Api_Card_FlashCard old =
    case old of
        Evergreen.V55.Api.Card.Markdown p0 ->
            Evergreen.V56.Api.Card.Markdown (p0 |> migrate_Api_Card_MarkdownCard)


migrate_Api_Card_MarkdownCard : Evergreen.V55.Api.Card.MarkdownCard -> Evergreen.V56.Api.Card.MarkdownCard
migrate_Api_Card_MarkdownCard old =
    old


migrate_Api_Card_PromptFrequency : Evergreen.V55.Api.Card.PromptFrequency -> Evergreen.V56.Api.Card.PromptFrequency
migrate_Api_Card_PromptFrequency old =
    case old of
        Evergreen.V55.Api.Card.Immediately ->
            Evergreen.V56.Api.Card.Immediately

        Evergreen.V55.Api.Card.OneDay ->
            Evergreen.V56.Api.Card.OneDay

        Evergreen.V55.Api.Card.TwoDays ->
            Evergreen.V56.Api.Card.TwoDays

        Evergreen.V55.Api.Card.SevenDays ->
            Evergreen.V56.Api.Card.SevenDays

        Evergreen.V55.Api.Card.FourteenDays ->
            Evergreen.V56.Api.Card.FourteenDays

        Evergreen.V55.Api.Card.ThirtyDays ->
            Evergreen.V56.Api.Card.ThirtyDays
